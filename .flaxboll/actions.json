{"1746818258362":{"actionType":"saveAll","createdAt":"1746818258362","actionID":"1746818258362","userID":"#TEMP","path":"system.capsules.35e5c9be-64c2-4db8-9b82-3db26ed4bbf1.capsUseCodeInfo.capsUseInputs.sss_custom_caps-0.capsIptTxtValue","oldValue":"() => <></>","newValue":"() => {\n\tconst targetDate = '2025-12-31T23:59:59';\n\tconst [timeLeft, setTimeLeft] = React.useState({ days: 0, hours: '00', minutes: '00', seconds: '00' });\n\n\tconst style_1 = { alignItems: 'center', justifyContent: 'center' };\n\tconst style_days = { fontSize: 48, fontWeight: 'bold', color: '#FFF' };\n\tconst style_time = { fontSize: 32, color: '#FFF' };\n\n\tconst formatTime = (time) => { \n\t\tconst days = Math.floor(time / (3600 * 24)); \n\t\tconst hours = String(Math.floor((time % (3600 * 24)) / 3600)).padStart(2, '0'); \n\t\tconst minutes = String(Math.floor((time % 3600) / 60)).padStart(2, '0'); \n\t\tconst seconds = String(time % 60).padStart(2, '0'); \n\n\t\treturn { days, hours, minutes, seconds }; \n\t};\n\n\tReact.useEffect(() => { \n\t\tconst countdown = () => { \n\t\tconst now = new Date().getTime(); \n\t\tconst target = new Date(targetDate).getTime(); \n\t\tif (isNaN(target)) { \n\t\t\tsetTimeLeft({ days: 0, hours: '00', minutes: '00', seconds: '00' }); \n\t\t\treturn; \n\t} \n\t\tconst distance = target - now; if (distance <= 0) { setTimeLeft({ days: 0, hours: '00', minutes: '00', seconds: '00' }); return; } \n\t\tconst timeInSeconds = Math.floor(distance / 1000); \n\t\tconst { days, hours, minutes, seconds } = formatTime(timeInSeconds); setTimeLeft({ days, hours, minutes, seconds }); }; \n\t\tconst intervalId = setInterval(countdown, 1000); return () => clearInterval(intervalId); \n\t}, [targetDate]);\n\n\treturn (\n\t\t<RN.View style={style_1}>\n\t\t\t<RN.Text style={style_days}>{timeLeft.days} DAYS</RN.Text>\n\t\t\t<RN.Text style={style_time}>{timeLeft.hours} : {timeLeft.minutes} : {timeLeft.seconds} LEFT</RN.Text>\n\t\t</RN.View>\n\t);\n}"}}