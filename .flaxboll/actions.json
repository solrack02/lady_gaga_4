{"1746817393901":{"actionType":"saveAll","createdAt":"1746817393901","actionID":"1746817393901","userID":"#TEMP","path":"system.capsules.35e5c9be-64c2-4db8-9b82-3db26ed4bbf1.capsUseCodeInfo.capsUseInputs.sss_custom_caps-0.capsIptTxtValue","oldValue":"() => {\n  const targetDate = '2025-12-31T23:59:59';\n  const [timeLeft, setTimeLeft] = React.useState({ days: 0, hours: '00', minutes: '00', seconds: '00' });\n\n  // Estilo para o cronômetro\n  const style_1 = {\n    alignItems: 'center',\n    justifyContent: 'center',\n  };\n  const style_days = {\n    fontSize: 48,\n    fontWeight: 'bold',\n    color: '#FFF',\n  };\n  const style_time = {\n    fontSize: 32,\n    color: '#FFF',\n  };\n\n  const formatTime = (time) => {\n    const days = Math.floor(time / (3600 * 24));\n    const hours = String(Math.floor((time % (3600 * 24)) / 3600)).padStart(2, '0');\n    const minutes = String(Math.floor((time % 3600) / 60)).padStart(2, '0');\n    const seconds = String(time % 60).padStart(2, '0');\n    return { days, hours, minutes, seconds };\n  };\n\n  // Atualiza o cronômetro\n  React.useEffect(() => {\n    const countdown = () => {\n      const now = new Date().getTime();\n      const target = new Date(targetDate).getTime();\n\n      // Verifica se a data é válida\n      if (isNaN(target)) {\n        setTimeLeft({ days: 0, hours: '00', minutes: '00', seconds: '00' });\n        return;\n      }\n\n      const distance = target - now;\n\n      if (distance <= 0) {\n        setTimeLeft({ days: 0, hours: '00', minutes: '00', seconds: '00' });\n        return;\n      }\n\n      const timeInSeconds = Math.floor(distance / 1000);\n      const { days, hours, minutes, seconds } = formatTime(timeInSeconds);\n\n      setTimeLeft({ days, hours, minutes, seconds });\n    };\n\n    const intervalId = setInterval(countdown, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [targetDate]);\n\n  return (\n    <RN.View style={style_1}>\n      <RN.Text style={style_days}>{timeLeft.days} DAYS</RN.Text>\n      <RN.Text style={style_time}>{timeLeft.hours} : {timeLeft.minutes} : {timeLeft.seconds} LEFT</RN.Text>\n    </RN.View>\n  );\n};\n","newValue":"() => {\n  const targetDate = '2025-12-31T23:59:59';\n  const [timeLeft, setTimeLeft] = React.useState({ days: 0, hours: '00', minutes: '00', seconds: '00' });\n\n  // Estilo para o cronômetro\n  const style_1 = {\n    alignItems: 'center',\n    justifyContent: 'center',\n  };\n  const style_days = {\n    fontSize: 48,\n    fontWeight: 'bold',\n    color: '#FFF',\n  };\n  const style_time = {\n    fontSize: 32,\n    color: '#FFF',\n  };\n\n  const formatTime = (time) => {\n    const days = Math.floor(time / (3600 * 24));\n    const hours = String(Math.floor((time % (3600 * 24)) / 3600)).padStart(2, '0');\n    const minutes = String(Math.floor((time % 3600) / 60)).padStart(2, '0');\n    const seconds = String(time % 60).padStart(2, '0');\n    return { days, hours, minutes, seconds };\n  };\n\n  // Atualiza o cronômetro\n  React.useEffect(() => {\n    const countdown = () => {\n      const now = new Date().getTime();\n      const target = new Date(targetDate).getTime();\n\n      // Verifica se a data é válida\n      if (isNaN(target)) {\n        setTimeLeft({ days: 0, hours: '00', minutes: '00', seconds: '00' });\n        return;\n      }\n\n      const distance = target - now;\n\n      if (distance <= 0) {\n        setTimeLeft({ days: 0, hours: '00', minutes: '00', seconds: '00' });\n        return;\n      }\n\n      const timeInSeconds = Math.floor(distance / 1000);\n      const { days, hours, minutes, seconds } = formatTime(timeInSeconds);\n\n      setTimeLeft({ days, hours, minutes, seconds });\n    };\n\n    const intervalId = setInterval(countdown, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [targetDate]);\n\n  return (\n    <RN.View style={style_1}>\n      <RN.Text style={style_days}>{timeLeft.days} DAYS</RN.Text>\n      <RN.Text style={style_time}>{timeLeft.hours} : {timeLeft.minutes} : {timeLeft.seconds} LEFT</RN.Text>\n    </RN.View>\n  );\n}"}}